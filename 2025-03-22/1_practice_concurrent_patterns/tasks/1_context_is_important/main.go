package main

import (
	"fmt"
	"time"
)

func main() {
	orders := make(chan string)
	// Возможно тут нужно инициализировать еще что-то...

	// Сегодня на кухне у нас будет трудиться три повара(горутины)
	// Запустите процесс готовки пицц - у нас сегодня как минимум 5 заказов
	for i := 1; i <= 3; i++ {
		name := fmt.Sprintf("Повар %d", i)
	}

	// Отправляем заказы в планшеты поварам (в горутине)
	// Допишите логику отправки заказа поварам
	go func() {
		pizzas := []string{"Маргарита", "Пепперони", "Гавайская", "Четыре сыра", "Вегетарианская"}
		for _, pizza := range pizzas {

		}
	}()

	// Возможно здесь что-то можно улучшить, особенно если мы расширим пиццерию
	// до большой сети и будем обрабатывать много заказов.
	// Ну и на кухне даже при таком количестве заказов иногда возникают задержки.
	// В конце концов - не можем же мы закрыть пиццерию вечером, когда повара еще не ушли домой))
	time.Sleep(1 * time.Second)
	fmt.Println("Пиццерия закрыта!")
}

// Вполне возможно, что в функцию нужно будет еще что-то передать
func cook(name string, orders <-chan string) {
	for {
		// Планшет поваров получает не только заказы,
		// но и информацию о завершении рабочего дня,
		// и информацию о том, что заказов больше нет.
		// У нас пока нет этой логики - напишите её, чтобы повара могли вовремя пойти домой
		select {
		case order := <-orders:
			fmt.Printf("%s начал готовить: %s\n", name, order)
			time.Sleep(3 * time.Second) // Время приготовления пиццы
			fmt.Printf("%s закончил: %s\n", name, order)

		}
	}
}
